/**
 * Automatically generated by $tool.name $tool.version
 * template engine: velocity
 * template file: fsm-sing-int.vm
 * comment: generates a singleton - states are modeled by integer values
 */
package ${packageName};

import ${model.sutPackage}.${model.sutName};

import eu.fittest.fbk.efsm2ct.efsm2mon.runtime.FsmtesterException;
import eu.fittest.fbk.efsm2ct.efsm2mon.runtime.UnderSpecifiedException;
import eu.fittest.fbk.efsm2ct.efsm2mon.runtime.InternalInconsistencyException;
import eu.fittest.fbk.efsm2ct.efsm2mon.runtime.NotApplicableException;
import eu.fittest.fbk.efsm2ct.efsm2mon.runtime.SutCommunicationException;

import java.util.logging.Logger;

public class Test${model.sutName}  {

    private static String [] stateNames = {
    
        #foreach($s in $model.states)
            "$s.name",
        #end

    };

    private static final int S_STATE = ${model.initialState.id};
    private static Logger log = Logger.getLogger("flexdriver");
    private static int s_state = S_STATE;
    private static ${model.sutName} sut;
    #if (${model.hasRunControl})
    private static boolean shutdownCalled;
    #end

    private Test${model.sutName}() {}

    #if (${model.hasRunControl})

    public static void _startup() throws Throwable  {

        log.info("TRANSITION - STARTUP");

        if (sut == null) {
            sut = new ${model.sutName}();
            shutdownCalled = true;
        }
        

        if (!shutdownCalled) {
            
            try {
                     
			
			sut.shutdown();
                        
                         
                     } catch (Throwable ex) {
                         //
                     }
            
        }
 
       

        shutdownCalled = false;
        try {
            sut.startup();
        } catch (Throwable ex) {
            log.warning("TRANSITION - STARTUP EXCEPTION:"+ex.toString());
            ex.printStackTrace(System.err);
            throw ex;
        }
        
        s_state = S_STATE;
    }

    public static void _shutdown() throws Exception {

        log.info("TRANSITION - SHUTDOWN");

        if (!shutdownCalled) {
            
            try {
                     
			log.info("TRANSITION - SHUTDOWN REQUESTED TO SUT");
			sut.shutdown();
                        log.info("TRANSITION - SHUTDOWN COMPLETED BY SUT");
                         
                     } catch (Throwable ex) {
                         //
                     }
             
        }
        shutdownCalled = true;
    }

    #end

    #foreach($m in $model.mutators)
    public static void ${m.name}(${m.formalArgs}) throws FsmtesterException {

       log.info("TRANSITION EVENT ${m.alias}("+${m.actualArgsConcatenated}+")");

        boolean applies =

        #foreach($s in ${m.sources})
            s_state == ${s.id} ||
        #end false;

        if (!applies) {

           #if (${model.hasRunControl})
	   try {
		_shutdown();
	    } catch (Exception ex) {
		//
	    }
            #end
            log.info("TRANSITION FAILED: ${m.name} doesn't apply to current state:"+ stateNames[s_state] );
            throw new NotApplicableException("${m.name} doesn't apply to current state:"+ stateNames[s_state] );
        }

	try {
        sut.${m.name}(${m.actualArgs});
	} catch (Exception ex) {
           #if (${model.hasRunControl})
	   try {
		_shutdown();
	    } catch (Exception ex1) {
		//
	    }
            #end
            log.info("TRANSITION FAILED: ${m.name} SutCommunicationException:"+ex);
            throw new SutCommunicationException(ex);
        }

        #foreach($ins in $model.inspectors)
        ${ins.type} ${ins.name} = sut.${ins.name}();
        #end

        String targetStateStr = "sut.state("
        #foreach($ins in $model.inspectors)
            + ("${ins.name}=" + ${ins.name}+" ")
        #end
        +")";


        switch (s_state) {
                #foreach($src in ${m.sources})
                case ${src.id}:
                    #foreach($t in ${src.outgoing})
                    
                    #if(${t.mutator} == $m)
                    if ( ${t.target.predicate} ) { 
                        // TRANSITION: ${m.alias} : ${t.source.name} -> ${t.target.name}
                        log.info("TRANSITION: ${m.alias} : ${t.source.name} -> ${t.target.name}");
                        s_state = ${t.target.id};
                    } else
                    #end
                    #end {
			   #if (${model.hasRunControl})
                            try {
                                _shutdown();
                            } catch (Exception ex) {
                                //
                            }
                            #end
                        log.info("TRANSITION FAILED: in state "+stateNames[s_state]+", unexpected target state for mutator: ${m.name} "+targetStateStr);
                        throw new UnderSpecifiedException("in state "+stateNames[s_state]+", unexpected target state for mutator: ${m.name} "+targetStateStr);
                    }
                    break;
                #end
                default:
			#if (${model.hasRunControl})
                        try {
                             _shutdown();
                         } catch (Exception ex) {
                             //
                         }
                         #end
                        log.severe("TRANSITION FAILED: fsmtester internal inconsistency error, state:"+stateNames[s_state]);
                        throw new InternalInconsistencyException("fsmtester internal inconsistency error, state:"+stateNames[s_state]);
        }
    }
    #end
}
