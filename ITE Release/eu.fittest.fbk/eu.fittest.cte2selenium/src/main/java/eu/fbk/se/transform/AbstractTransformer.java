package eu.fbk.se.transform;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.Writer;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import java.util.regex.Matcher;

import javax.xml.bind.Binder;
import javax.xml.bind.JAXBContext;
import javax.xml.bind.JAXBElement;
import javax.xml.namespace.NamespaceContext;
import javax.xml.namespace.QName;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.xpath.XPath;
import javax.xml.xpath.XPathConstants;
import javax.xml.xpath.XPathExpressionException;
import javax.xml.xpath.XPathFactory;
import javax.xml.xpath.XPathExpression;

import org.stringtemplate.v4.ST;
import org.w3c.dom.Document;
import org.w3c.dom.Node;
//import org.w3c.dom.Document;
//import org.w3c.dom.Node;

import eu.fbk.se.datagenerator.BooleanGenerator;
import eu.fbk.se.datagenerator.DataGeneratorFactory;
import eu.fbk.se.datagenerator.DateGenerator;
import eu.fbk.se.datagenerator.IDataGenerator;
import eu.fbk.se.datagenerator.StringGenerator;
import eu.fbk.se.fsm.cte.Classification;
import eu.fbk.se.fsm.cte.Composition;
import eu.fbk.se.fsm.cte.CteObject;
import eu.fbk.se.fsm.cte.TestGroup;
import eu.fbk.se.fsm.cte.TestGroup.TestCase;
import eu.fbk.se.fsm.cte.Validity;
import eu.fbk.se.fsm.utils.JAXBUtil;
import eu.fbk.se.fsm.xinput.AtomicParam;
import eu.fbk.se.fsm.xinput.ComplexDataSpecType;
import eu.fbk.se.fsm.xinput.DomainInputs;
import eu.fbk.se.fsm.xinput.Event;
import eu.fbk.se.fsm.xinput.Xinput;
import eu.fbk.se.utils.Constants;

public abstract class AbstractTransformer implements ITranformer {

	protected String outputClassName;
	protected String outputPackageName;
	protected String targetPage;

	protected ST header;
	protected ST footer;

	protected AbstractTemplateProvider templateProvider;
	protected DomainInputs domainInputs = null;

	List<IProgressListener> listenerList = new ArrayList<IProgressListener>();

	public AbstractTransformer(AbstractTemplateProvider _templateProvider,
			String packageName, String className, String _targetPage,
			String seleniumDriver) throws TransformException {

		templateProvider = _templateProvider;
		if (!templateProvider.isTemplateReady()) {
			throw new TransformException("Template provider has problem");
		}

		header = templateProvider.getHeaderTemplate();
		header.add("PackageName", packageName);
		header.add("ClassName", className);

		footer = templateProvider.getFooterTemplate();
		footer.add("ClassName", className);

		outputPackageName = packageName;
		outputClassName = className;
		targetPage = _targetPage;
	}

	/**
	 * Register progress listener
	 * 
	 * @param listener
	 */
	public void register(IProgressListener listener) {
		listenerList.add(listener);
	}

	/**
	 * 
	 * @param cteFile
	 * @param outputFolder
	 * @return
	 * @throws TransformException
	 */
	public boolean transform(String cteFile, String outputFolder,
			boolean validTestOnly) throws TransformException {

		CteObject cte = JAXBUtil.loadCte(cteFile);
		if (cte == null) {
			throw new TransformException("Problem with cte file");
		}

		if (cte.getTree() == null) {
			throw new TransformException("CTE tree can not be null");
		}

		if (cte.getTree().getRoot() == null
				|| !(cte.getTree().getRoot() instanceof Composition)) {
			throw new TransformException("CTE tree root must be a composition");
		}

		Composition testSequence = null;
		List<Object> oList = ((Composition) cte.getTree().getRoot())
				.getCompositionOrClassification();
		if (!oList.isEmpty()) {
			for (Object o : oList) {
				if (o instanceof Composition) {
					testSequence = (Composition) o;
					break; // first composition found is considered as test
							// sequence,
					// this list should have only one element
				}
			}
		}

		if (testSequence == null) {
			throw new TransformException(
					"No test sequence found, perhaps CTE files is not compliant with\n"
							+ "those generated by FSM2CTE tool");
		}

		if (!prepareOutputFolder(outputFolder)) {
			return false;
		}

		// extract all the instances of test case
		List<TestGroup.TestCase> tcList = extractTestCases(cte.getTestGroup());

		// fixed 28/09/2011, in case tcList is empty then create a test case
		// that contains all specified events

		StringBuilder outputBuilder = new StringBuilder();
		outputBuilder.append(header.render());

		// Notify listeners
		int workLoad = tcList.size();
		if (workLoad == 0)
			workLoad = 1;
		for (IProgressListener listener : listenerList) {
			listener.start(workLoad);
		}

		if (tcList.size() > 0) {
			for (TestGroup.TestCase tc : tcList) {

				if (!validTestOnly
						|| tc.getValidity() == null
						|| (validTestOnly && tc.getValidity().equals(
								Validity.VALID))) {
					String outTC = buildTestCase(tc, testSequence);
					outputBuilder.append(outTC);
					outputBuilder.append("\n\n\n");

				}
				// Notify listeners
				for (IProgressListener listener : listenerList) {
					listener.progress(1);
				}
			}
		} else {
			String outTC = buildDefaultTestCase(testSequence);
			outputBuilder.append(outTC);
			outputBuilder.append("\n\n\n");
			// Notify listeners
			for (IProgressListener listener : listenerList) {
				listener.progress(1);
			}
		}

		outputBuilder.append(footer.render());

		String fullPath = outputFolder
				+ File.separator
				+ outputPackageName.replaceAll("\\.",
						Matcher.quoteReplacement(File.separator));
		File outFolder = new File(fullPath);
		outFolder.mkdirs();

		fullPath = fullPath + File.separator + outputClassName + ".java";
		File outFile = new File(fullPath);
		try {
			outFile.createNewFile();
			Writer writer = new BufferedWriter(new FileWriter(outFile));
			writer.write(outputBuilder.toString());
			writer.close();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		// Notify listeners
		for (IProgressListener listener : listenerList) {
			listener.finish();
		}

		return true;
	}

	/**
	 * 
	 * @param cteFile
	 * @param domainInputFile
	 * @param outputFolder
	 * @return
	 * @throws TransformException
	 */
	public boolean transform(String cteFile, String domainInputFile,
			String outputFolder, boolean validTestOnly)
			throws TransformException {

		domainInputs = JAXBUtil.loadDomainInputs(domainInputFile);
		if (domainInputs == null) {
			throw new TransformException("Problem with domain input file.");
		}

		return transform(cteFile, outputFolder, validTestOnly);
	}

	/**
	 * Build a test case
	 * 
	 * @param tc
	 * @param testSequence
	 * @return
	 */
	protected abstract String buildTestCase(TestGroup.TestCase tc,
			Composition testSequence);

	/**
	 * Build a default test case from the sequence of events, used in case no
	 * test case is generated by CTE
	 * 
	 * @param testSequence
	 * @return
	 */
	protected abstract String buildDefaultTestCase(Composition testSequence);

	/**
	 * Build detailed parameter with domain input
	 * 
	 * @param step
	 * @param testMarkTrue
	 * @param e
	 * @return
	 */
	protected String buildParameters(Composition step, String[] testMarks,
			Event e) {
		if (e == null || domainInputs == null) {
			return "";
		}

		Xinput eventInput = getDomainInput(e);

		StringBuilder paramBuilder = new StringBuilder();
		for (Object coc : step.getCompositionOrClassification()) {
			if (coc instanceof Classification) {
				Classification classification = (Classification) coc;
				for (eu.fbk.se.fsm.cte.Class o : classification.getClazz()) {
					for (String mark : testMarks) {
						if (mark.equals(o.getId())) {

							// query domain input spec
							ComplexDataSpecType dataClz = queryDataClz(
									o.getName(), classification.getName(),
									eventInput);
							boolean paramOK = false;
							if (dataClz != null) {
								IDataGenerator generator = DataGeneratorFactory
										.createDataGenerator(dataClz);
								if (generator != null) {
									if (generator instanceof StringGenerator
											|| generator instanceof BooleanGenerator
											|| generator instanceof DateGenerator) {
										paramBuilder
												.append(Constants.STRING_QUOTE);
										paramBuilder.append(generator
												.generate(dataClz));
										paramBuilder
												.append(Constants.STRING_QUOTE);
									} else {
										paramBuilder.append(generator
												.generate(dataClz));
									}
									paramBuilder.append(", ");
									paramOK = true;
								}
							}

							if (!paramOK) {
								// Check data type
								dataClz = queryDataClz(
										classification.getName(), eventInput);
								if ((dataClz != null)
										&& "string".equals(dataClz.getBase()
												.getLocalPart())) {
									paramBuilder.append(Constants.STRING_QUOTE);
								}
								paramBuilder.append(o.getName());

								if ((dataClz != null)
										&& "string".equals(dataClz.getBase()
												.getLocalPart())) {
									paramBuilder.append(Constants.STRING_QUOTE);
								}
								paramBuilder.append(", ");
							}

							break; // one mark is enough
						}
					}
				}
			}
			// TODO instantiate objects belonging to compositions
			/*
			 * else if (coc instanceof Composition) {
			 * paramBuilder.append(buildParameters((Composition) coc, testMarks,
			 * e)); }
			 */
		}
		if (paramBuilder.length() > 2) {
			return paramBuilder.substring(0, paramBuilder.length() - 2); // trim
																			// the
																			// last
																			// comma
		} else {
			return "";
		}
	}

	/**
	 * Build default param
	 * 
	 * @param step
	 * @param e
	 * @return
	 */
	protected String buildParameters(Composition step, Event e) {
		if (e == null || domainInputs == null) {
			return "";
		}

		Xinput eventInput = getDomainInput(e);

		StringBuilder paramBuilder = new StringBuilder();
		for (Object coc : step.getCompositionOrClassification()) {
			if (coc instanceof Classification) {
				Classification classification = (Classification) coc;
				Random selector = new Random();
				int selectedIndex = selector.nextInt(classification.getClazz()
						.size());
				eu.fbk.se.fsm.cte.Class o = classification.getClazz().get(
						selectedIndex);
				// query domain input spec
				ComplexDataSpecType dataClz = queryDataClz(o.getName(),
						classification.getName(), eventInput);
				boolean paramOK = false;
				if (dataClz != null) {
					IDataGenerator generator = DataGeneratorFactory
							.createDataGenerator(dataClz);
					if (generator != null) {
						if (generator instanceof StringGenerator
								|| generator instanceof BooleanGenerator
								|| generator instanceof DateGenerator) {
							paramBuilder.append(Constants.STRING_QUOTE);
							paramBuilder.append(generator.generate(dataClz));
							paramBuilder.append(Constants.STRING_QUOTE);
						} else {
							paramBuilder.append(generator.generate(dataClz));
						}
						paramBuilder.append(", ");
						paramOK = true;
					}
				}

				if (!paramOK) {
					// Check data type
					dataClz = queryDataClz(classification.getName(), eventInput);
					if ((dataClz != null)
							&& "string"
									.equals(dataClz.getBase().getLocalPart())) {
						paramBuilder.append(Constants.STRING_QUOTE);
					}
					paramBuilder.append(o.getName());

					if ((dataClz != null)
							&& "string"
									.equals(dataClz.getBase().getLocalPart())) {
						paramBuilder.append(Constants.STRING_QUOTE);
					}
					paramBuilder.append(", ");
				}

				break; // one mark is enough
			}

		}
		// TODO instantiate objects belonging to compositions
		/*
		 * else if (coc instanceof Composition) {
		 * paramBuilder.append(buildParameters((Composition) coc, testMarks,
		 * e)); }
		 */
		if (paramBuilder.length() > 2) {
			return paramBuilder.substring(0, paramBuilder.length() - 2); // trim
																			// the
																			// last
																			// comma
		} else {
			return "";
		}
	}

	protected Xinput getDomainInput(Event e) {
		if (e == null || domainInputs == null) {
			return null;
		}

		for (Xinput input : domainInputs.getXinput()) {
			if (input.getEvents().contains(e)) {
				return input;
			}
		}
		return null;
	}

	/**
	 * Query domain input data class specification
	 * 
	 * @param clzName
	 * @param classificationName
	 * @param input
	 * @return
	 */
	protected ComplexDataSpecType queryDataClz(String clzName,
			String classificationName, Xinput input) {
		if (input == null || domainInputs == null)
			return null;

		Document inputDom = convertToDOM(input);
		if (inputDom == null)
			return null;

		XPath xpath = XPathFactory.newInstance().newXPath();
		xpath.setNamespaceContext(new NamespaceContext() {

			public Iterator getPrefixes(String namespaceURI) {
				// TODO Auto-generated method stub
				return null;
			}

			public String getPrefix(String namespaceURI) {
				// TODO Auto-generated method stub
				return "tns";
			}

			public String getNamespaceURI(String prefix) {
				// TODO Auto-generated method stub
				return "http://www.fbk.eu/xinput";
			}
		});

		String path = "//tns:atomicParam[@id=\"" + classificationName
				+ "\"]/tns:dataClz[@name=\"" + clzName + "\"]";

		try {
			XPathExpression expr = xpath.compile(path);
			Node resNode = (Node) expr.evaluate(inputDom, XPathConstants.NODE);
			if (resNode != null) {
				Object o = w3cNode2Object(resNode);
				if (o instanceof JAXBElement) {
					return (ComplexDataSpecType) ((JAXBElement) o).getValue();
				}
			}
		} catch (XPathExpressionException e) {
			e.printStackTrace();
		}
		return null;
	}

	/**
	 * Query based on classification only
	 * 
	 * @param classificationName
	 * @param input
	 * @return
	 */
	protected ComplexDataSpecType queryDataClz(String classificationName,
			Xinput input) {
		if (input == null || domainInputs == null)
			return null;

		Document inputDom = convertToDOM(input);
		if (inputDom == null)
			return null;

		XPath xpath = XPathFactory.newInstance().newXPath();
		xpath.setNamespaceContext(new NamespaceContext() {

			public Iterator getPrefixes(String namespaceURI) {
				// TODO Auto-generated method stub
				return null;
			}

			public String getPrefix(String namespaceURI) {
				// TODO Auto-generated method stub
				return "tns";
			}

			public String getNamespaceURI(String prefix) {
				// TODO Auto-generated method stub
				return "http://www.fbk.eu/xinput";
			}
		});

		String path = "//tns:atomicParam[@id=\"" + classificationName + "\"]";

		try {
			XPathExpression expr = xpath.compile(path);
			Node resNode = (Node) expr.evaluate(inputDom, XPathConstants.NODE);
			if (resNode != null) {
				Object o = w3cNode2Object(resNode);
				if (o instanceof AtomicParam) {
					if (((AtomicParam) o).getDataClz() != null
							&& ((AtomicParam) o).getDataClz().size() > 0) {
						return ((AtomicParam) o).getDataClz().get(0);
					}
				}
			}
		} catch (XPathExpressionException e) {
			e.printStackTrace();
		}
		return null;
	}

	/**
	 * Detailed xpath
	 * 
	 * @param e
	 * @param inferredEvent
	 * @param parameters
	 * @return
	 */
	protected String adjustXPath(Event e, String inferredEvent,
			String parameters) {
		String xpath = e.getReachedByXPath();
		int lastBracket = xpath.lastIndexOf("]");
		if (lastBracket > 0) {
			StringBuilder ret = new StringBuilder(xpath.substring(0,
					lastBracket));
			ret.append(" and @");
			ret.append(e.getTargetEventToFire());
			ret.append("=\\\"");
			ret.append(e.getName()); // inferredEvent
			ret.append("(");
			ret.append(parameters);
			ret.append(")\\\"]");

			return ret.toString();
		} else {
			return xpath;
		}
	}

	protected Event getDomainEvent(String inferredEvent) {
		if (domainInputs != null) {
			List<Event> events = domainInputs.getEvent();
			for (Event e : events) {
				if (e.getId().equals(inferredEvent)) {
					return e;
				}
			}
		}
		return null;
	}

	/**
	 * Populate parameters for event
	 * 
	 * @param c
	 * @param tc
	 * @return
	 */
	protected String buildParameters(Composition step, String testMarkTrue) {
		StringBuilder paramBuilder = new StringBuilder();
		for (Object coc : step.getCompositionOrClassification()) {
			if (coc instanceof Classification) {
				for (eu.fbk.se.fsm.cte.Class o : ((Classification) coc)
						.getClazz()) {
					if (testMarkTrue.contains(o.getId())) {
						paramBuilder.append(Constants.STRING_QUOTE);
						paramBuilder.append(o.getName());
						paramBuilder.append(Constants.STRING_QUOTE + ", ");
					}
				}
			} else if (coc instanceof Composition) {
				paramBuilder.append(buildParameters((Composition) coc,
						testMarkTrue));
			}
		}
		if (paramBuilder.length() > 2) {
			return paramBuilder.substring(0, paramBuilder.length() - 1); // trim
																			// the
																			// last
																			// comma
		} else {
			return "";
		}
	}

	/**
	 * Traverse all recursively the test group portion of the tree to extract
	 * all test cases
	 * 
	 * @author cunduy
	 * 
	 * @param testGroup
	 * @return
	 */
	private List<TestGroup.TestCase> extractTestCases(TestGroup testGroup) {
		if (testGroup == null
				|| testGroup.getTestGroupOrTestCaseOrTestSequence() == null) {
			return null;
		}

		List<TestGroup.TestCase> retList = new ArrayList<TestGroup.TestCase>();

		List<Object> tcList = testGroup.getTestGroupOrTestCaseOrTestSequence();
		for (Object o : tcList) {
			if (o instanceof TestGroup.TestCase) {
				retList.add((TestCase) o);
			} else if (o instanceof TestGroup) {
				List<TestGroup.TestCase> subTcs = extractTestCases((TestGroup) o);
				if (subTcs != null) {
					retList.addAll(subTcs);
				}
			}
		}

		return retList;
	}

	/**
	 * Check and prepare output folder
	 * 
	 * @param folderName
	 * @return
	 */
	private boolean prepareOutputFolder(String folderName) {
		File outFolder = new File(folderName);
		try {
			outFolder.mkdirs();
			return true;
		} catch (Exception e) {
			e.printStackTrace();
			return false;
		}
	}

	/**
	 * Convert JAXB object to DOM for xpath queries
	 * 
	 * @author cunduy
	 * 
	 * @param testSequence
	 * @return
	 */
	protected Document convertToDOM(Xinput input) {
		JAXBContext jcontext;
		try {
			DocumentBuilderFactory fact = DocumentBuilderFactory.newInstance();
			fact.setNamespaceAware(true);
			DocumentBuilder builder = fact.newDocumentBuilder();

			Document doc = builder.newDocument();

			// bind the doc with input
			QName qname = new QName("http://www.fbk.eu/xinput", "xinput");
			jcontext = JAXBContext.newInstance("eu.fbk.se.fsm.xinput");
			Binder<Node> binder = jcontext.createBinder();

			binder.marshal(new JAXBElement<Xinput>(qname, Xinput.class, input),
					doc);

			return doc;
		} catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
			return null;
		}
	}

	/**
	 * Convert W3C Node to JAXB object
	 * 
	 * @param node
	 * @return
	 */
	protected Object w3cNode2Object(Node node) {
		try {
			JAXBContext jcontext = JAXBContext
					.newInstance("eu.fbk.se.fsm.xinput");
			Binder<Node> binder = jcontext.createBinder();
			return binder.unmarshal(node);
		} catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
			return null;
		}
	}

}
