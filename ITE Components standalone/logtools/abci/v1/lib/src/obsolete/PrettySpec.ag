-- Pretty print the Core instrumentation language
MODULE {PrettySpec} {ppSpec} {}

INCLUDE "LanguageAst.ag"

imports
{
import Language
import PrettyUtil
import Data.Word
}

WRAPPER Spec

{
ppSpec :: Spec -> Doc
ppSpec spec = out where
  inh = Inh_Spec {}
  sem = sem_Spec spec
  syn = wrap_Spec sem inh
  out = output_Syn_Spec syn
}

ATTR Spec Instr Match Param MaybeVal Val Type Coercion UnOp BinOp Rel
  [ | | output USE {$+$} {empty} : Doc ]

SEM Instr
  | Nop   lhs.output = text "Nop"
  | Fail  lhs.output = case @msg of
                         Nothing -> text "Fail"
                         Just s  -> text "Fail" <+> text (show s)
  | Seq   lhs.output = @left.output $+$ @right.output
  | Alt   lhs.output = (nest 2 @left.output)
                       $+$ (if @tryBoth then text "<|>" else text "<|>>")
                       $+$ (nest 2 @right.output)
  | Loop  lhs.output = text "Loop" $+$ nest 2 @instr.output
  | CallFun   lhs.output = text "CallFun" <+> @name.output <> text ":" <+> commasep @inps.outputs <+> text "~>" <+> commasep @outs.outputs
  | CallProp  lhs.output = text "CallProp" <+> @prop.output <> text ":" <+> commasep @inps.outputs <+> text "~>" <+> commasep @outs.outputs
  | Match     lhs.output = text "Match" <+> @spec.output
  | Type      lhs.output = text "Type" <+> @val.output <+> text "~>" <+> @tp.output
  | Static    lhs.output = text "Static"  $+$ nest 2 @instr.output
  | Dyn       lhs.output = text "Dynamic" $+$ nest 2 @instr.output
  | Assign    lhs.output = text "Assign" <+> text "sym" <+> text (show @var) <+> text ":=" <+> @val.output
  | Assert    lhs.output = text "Assert" <+> @guard.output
  | BinOp     lhs.output = text "BinOp" <+> @left.output <+> @op.output <+> @right.output <+> text "~>" <+> @out.output
  | UnOp      lhs.output = text "UnOp" <+> @op.output <+> @inp.output <+> text "~>" <+> @out.output
  | Scan      lhs.output = text "Scan"   <+> @format.output
  | Pretty    lhs.output = text "Pretty" <+> @format.output
  | TypeOf    lhs.output = text "TypeOf" <+> @inp.output <+> text "~>" <+> @out.output
  | Coerce    lhs.output = text "Coerce" <+> @inp.output <+> text "~>" <+> @out.output <+> text "{" <> @coe.output <> text "}"
  | Last      lhs.output = text "Last" $+$ nest 2 @instr.output

SEM Match
  | EnterBlock  lhs.output = text "EnterBlock" <+> @id.output <+> @cyc.output <+> @excp.output
  | LeaveBlock  lhs.output = text "LeaveBlock" <+> @id.output <+> @cyc.output
  | FailBlock   lhs.output = text "FailedBlock" <+> @id.output <+> @excp.output
  | EnterFun    lhs.output = text "EnterFun" <+> @id.output <+> @name.output <+> @kind.output <+> text "<~" <+> commasep @inps.outputs
  | LeaveFun    lhs.output = text "LeaveFun" <+> @id.output <+> @name.output <+> @kind.output <+> text "~>" <+> commasep @outs.outputs
  | FailFun     lhs.output = text "FailedFun" <+> @id.output <+> @name.output <+> @kind.output <+> @excp.output
  | BeginCall   lhs.output = text "BeginCall" <+> @id.output <+> @name.output <+> @kind.output <+> text "<~" <+> commasep @inps.outputs
  | DoneCall    lhs.output = text "DoneCall" <+> @id.output <+> @name.output <+> @kind.output <+> text "~>" <+> commasep @outs.outputs
  | FailedCall  lhs.output = text "FailedCall" <+> @id.output <+> @name.output <+> @kind.output <+> @excp.output

ATTR Params [ | | outputs : {[Doc]} ]
SEM Params
  | Cons  lhs.outputs = @hd.output : @tl.outputs
  | Nil   lhs.outputs = []
  | Any   lhs.outputs = [text "*"]

SEM Val
  | Int UInt Bool String
             lhs.output = text (show @val)
  | Array    lhs.output = text "{" <+> commasep @elems.outputs <+> text "}"
  | Sym      lhs.output = text "sym" <+> text (show @sym)
  | Ind      lhs.output = @arr.output <> text "[" <> @ind.output <> text "]"
  | Prop     lhs.output = @obj.output <> text "." <> text @key
  | Static   lhs.output = text "." <> text @key
  | Dyn      lhs.output = @obj.output <> text "[" <> @key.output <> text "]"
  | Type     lhs.output = text "type"
  | Method   lhs.output = text @name

ATTR Vals [ | | outputs : {[Doc]} ]
SEM Vals
  | Cons  lhs.outputs = @hd.output : @tl.outputs
  | Nil   lhs.outputs = []

SEM Coercion
  | None      lhs.output = text "none"
  | Any       lhs.output = text "to any"
  | Any'      lhs.output = text "from any"
  | String    lhs.output = text "to string"
  | Double    lhs.output = text "to double"
  | Int       lhs.output = text "to int"
  | UInt      lhs.output = text "to unsigned int"
  | Instance  lhs.output = text "by instance"

SEM UnOp
  | Abs          lhs.output = text "abs"
  | Not          lhs.output = text "not"
  | Neg          lhs.output = text "neg"
  | IsJust       lhs.output = text "isJust"
  | IsNothing    lhs.output = text "isNothing"
  | ExtractJust  lhs.output = text "extractJust"
  | Length       lhs.output = text "length"

SEM BinOp
  | And          lhs.output = text "&&"
  | Or           lhs.output = text "||"
  | Rel          lhs.output = @rel.output
  | Add          lhs.output = text "+"
  | Sub          lhs.output = text "-"
  | Mul          lhs.output = text "*"
  | Div          lhs.output = text "/"
  | Mod          lhs.output = text "%"
  | Max          lhs.output = text "/\\"
  | Min          lhs.output = text "\\/"

SEM Rel
  | Equal        lhs.output = text "=="
  | Smaller      lhs.output = text "<"
  | Greater      lhs.output = text ">"
  | SmallerEqual lhs.output = text "<="
  | GreaterEqual lhs.output = text ">="
  | Negate       lhs.output = text "!" <> parens @rel.output
