MODULE {SimpleHash} {hash,bla} {}

INCLUDE "ByteCodeAst.ag"

imports
{
import ByteCode
import Data.Word
import Data.ByteString.Lazy hiding(foldr,head)

import qualified Data.Set as Set
import Data.Set(Set)
import qualified Data.Map as Map
import Data.Map(Map)
}


WRAPPER AbcFile
WRAPPER SwfFile

{
hash :: AbcFile -> Int
hash m = hash_Syn_AbcFile syn where
  syn = wrap_AbcFile sem inh
  inh = Inh_AbcFile {}
  sem = sem_AbcFile m

bla :: SwfFile -> [(String,Int)]
bla m = Map.toList $ distr_Syn_SwfFile syn where
  syn = wrap_SwfFile sem inh
  inh = Inh_SwfFile {}
  sem = sem_SwfFile m
}


ATTR AllAbcFile [ | | hash USE {+} {1} : Int ]


ATTR AllAbcFile [ | | output : SELF ]

SEM PoolDoubles
  | Cons  lhs.output = []


ATTR InstanceFlags InstanceFlag [ | | isSealed USE {||} {False} : Bool ]

SEM InstanceFlag | ClassSealed  lhs.isSealed = True

ATTR AllSwf [ | | seals USE {`Set.union`} {Set.empty} : {Set Word32} ]

SEM InstanceInfo | Info
  +seals = if @flags.isSealed
           then Set.insert @name
           else id

ATTR AllSwf [ | | nCallProps USE {+} {0} : Int ]
SEM Instr | CallMethod  +nCallProps = (+1)

ATTR AllSwf [ | | nInstrs USE {+} {0} : Int ]
SEM Instr | *
  +nInstrs = (+1)



ATTR AllSwf [ | | distr USE {`merge`} {Map.empty} : {Map String Int} ]
ATTR Instr CaseOffsets DebugType [ | | self : SELF ]

SEM Instructions
  | Cons  loc.mp = Map.singleton @loc.name 1
          loc.name = head $ words $ show @hd.self
          +distr = merge @loc.mp

{
merge = Map.unionWith (+)
}
