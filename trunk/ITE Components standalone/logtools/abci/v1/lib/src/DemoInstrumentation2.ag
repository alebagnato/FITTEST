{-
   An example of coding instrumentation. We will instrument method
   entry and retun instructions. 
-}

MODULE {DemoInstrumentation2} {} {}

optpragmas
{
{-# LANGUAGE Arrows, GADTs #-}
}

imports
{
import TestIt
import Data.List
}

INCLUDE "ByteCodeTrfBase.ag"

WRAPPER SwfFile

{
-- The top-level instrumentation function is composed as below.
--
exampleInjection :: Options -> [SymbolTables] -> SwfFile -> SwfFile
exampleInjection opts tbls inputSwf = injectedSwf where
  inh = Inh_SwfFile { opts_Inh_SwfFile = opts, tbls_Inh_SwfFile = tbls }
  transformer =  sem_SwfFile inputSwf
  syn         =  wrap_SwfFile transformer inh
  injectedSwf =  output_Syn_SwfFile syn
}

{
--
-- We will use the predicate below to specify which class name 
-- and method names can be instrumented; here it says all 
-- methods are instrumentable.
-- 
isTarget className methodName = True

--
-- As an example, we will inject code that will leaves
-- some tracing information in the Flash's own log-file:
--
myLog str className methodName = do 
  -- there is already a function callTrace that does this
  -- but here we'll redo it do that we can see how it is
  -- coded:
  s <- declString ("INFO: " ++ str ++ " " ++ className ++ "." ++ methodName)
  nm  <- declName "trace"
  findPropStrict nm
  pushString s
  callPropVoid nm 1
  
}

--
-- Instrumenting method's begin:
--
SEM Instruction | Virtual 
  inst.inj1 : InjHereAppend
  inst.inj1 = InjHereAppend_Inj
  inj1.code =  
     -- macth the start of each method's body
     when (@kind.self == VirtKind_BeginBody) $ do 
       mname     <- getMethodName
       className <- getClassName   
       -- check if it is the method that we want          
       when (isTarget className mname) $ myLog "enter" className mname 
                 
--
-- Instrumenting the "return" instruction
--         
SEM Instruction | ReturnValue                   
  inst.inj1 : InjHere
  inst.inj1 = InjHere_Inj
  inj1.mode = InjPrepend
  inj1.code = do 
                mname     <- getMethodName
                className <- getClassName                  
                when (isTarget className mname) $ myLog "exit" className mname 
                   
SEM Instruction | ReturnVoid                  
  inst.inj1 : InjHere
  inst.inj1 = InjHere_Inj
  inj1.mode = InjPrepend
  inj1.code = do 
                mname     <- getMethodName
                className <- getClassName                 
                when (isTarget className mname) $ myLog "exit" className mname 

{-
{
isVirtBeginBlock (VirtKind_BeginBlock _) = True
isVirtBeginBlock _ = False

isVirtEndBlock VirtKind_EndBlock = True
isVirtEndBlock _ = False
}         

--
-- Instrumenting a block; disabled. Uncomment if you want to try.
--
SEM Instruction | Virtual    
  inst.inj2 : InjHereAppend
  inst.inj2 = InjHereAppend_Inj
  inj2.code = when (isVirtBeginBlock @kind.self) $ do 
     mname     <- getMethodName
     className <- getClassName                
     when (isTarget className mname) $ myLog "exit" className mname 
-}
              

               

