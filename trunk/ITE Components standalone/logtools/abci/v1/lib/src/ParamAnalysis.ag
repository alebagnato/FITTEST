--
-- Each instruction can be seen as taking parameters (optionally) from the
-- stack and pushing a result on the stack (optionally).
-- Analyzes how the stack looks like prior to an instruction: which entries
-- were defined by which instruction(s).
--
-- For each stack entry, the trick is to keep a set of instruction labels
-- such that for each label there exists a path in the control flow graph
-- where that stack entry was defined the last time.
--

MODULE {ParamAnalysis} { analyzeDefsSwf,analyzeDefsAbc, emptyMethodDefInfos, emptyMethodDefInfo
                       , MethodDefInfo,MethodDefInfos,InstrDefInfo,StackDefInfo,DefInfo
                       , ppStackDefInfos, ppStackDefInfo
                       } {}

optpragmas
{
{-# LANGUAGE EmptyDataDecls, TypeFamilies #-}
}

INCLUDE "ByteCodeAst.ag"
INCLUDE "ByteCodeBranchInfo.ag"
INCLUDE "DistNameInfo.ag"
INCLUDE "InstructionInfo.ag"
INCLUDE "CommonImports.ag"
INCLUDE "NumberAstNodes.ag"

imports
{
import Fixpoint
import Debug.Trace
import Options
import PrettyUtil
}

WRAPPER SwfFile
WRAPPER AbcFile

{
emptyMethodDefInfos :: MethodDefInfos
emptyMethodDefInfos = []

emptyMethodDefInfo :: MethodDefInfo
emptyMethodDefInfo = IntMap.empty

analyzeDefsSwf :: Options -> SwfFile -> MethodDefInfos
analyzeDefsSwf opts m = out where
  inh = Inh_SwfFile { opts_Inh_SwfFile = opts }
  sem = sem_SwfFile m
  syn = wrap_SwfFile sem inh
  out = output_Syn_SwfFile syn

analyzeDefsAbc :: Options -> AbcFile -> MethodDefInfo
analyzeDefsAbc opts m = out where
  inh = Inh_AbcFile { opts_Inh_AbcFile = opts, tagNr_Inh_AbcFile = 0 }
  sem = sem_AbcFile m
  syn = wrap_AbcFile sem inh
  out = output_Syn_AbcFile syn

  
type MethodDefInfos = [MethodDefInfo]
type MethodDefInfo = IntMap InstrDefInfo
type InstrDefInfo = IntMap StackDefInfo
}

ATTR Tags [ | tagNr : Int | ]
ATTR Tag AbcFile BodyInfos BodyInfo InstructionsLike InstructionLike LabInstruction [ tagNr : Int | | ]

SEM SwfFile | File
  tags.tagNr   = 1

SEM Tags | Cons
  hd.tagNr = @lhs.tagNr
  tl.tagNr = 1 + @lhs.tagNr

ATTR RootToInstr [ opts : Options | | ]  -- Propagate options down

ATTR SwfFile Tags Tag            [ | | output USE {++} {[]} : MethodDefInfos ]
ATTR AbcFile BodyInfos BodyInfo  [ | | output USE {`mappend`} {mempty} : MethodDefInfo ]

SEM Tag | Abc        lhs.output = seq (resForceEval1 @file.output) $ [@file.output]
SEM BodyInfo | Info  lhs.output = seq (resForceEval1 @loc.stacksRes) $ IntMap.singleton @lhs.bodyId @loc.stacksRes

{
resForceEval1 :: IntMap a -> Int
resForceEval1 = IntMap.size
}


-- The stack stores for each entry the latest instructions where this entry is defined.
-- Thus, we take the union on all entries of a node in the CFG, and for each node, find out
-- how the stack is transformed.
{
type StackDefInfo = [DefInfo]
type DefInfo      = IntSet

joinStackDefs :: StackDefInfo -> StackDefInfo -> StackDefInfo
joinStackDefs []     ys     = ys
joinStackDefs xs     []     = xs
joinStackDefs (x:xs) (y:ys) = joinDefs x y : joinStackDefs xs ys

joinDefs :: DefInfo -> DefInfo -> DefInfo
joinDefs = IntSet.union

-- Instantiation of the fixpoint graph.
data TAbstractStack
type StackGraph = FixGraph TAbstractStack
type StackSem   = FixSem TAbstractStack
type instance EdgeVal TAbstractStack = StackDefInfo
type instance NodeVal TAbstractStack = (StackDefInfo, Int)  -- stack and iterations
type instance NodeId  TAbstractStack = Int
type instance SolveState TAbstractStack = ()
}

--
-- Pretty printing
--

{
stackPPLimit :: Int
stackPPLimit = 8  -- print at most 8 entries

ppStackDefInfos :: [StackDefInfo] -> Doc
ppStackDefInfos stacks = vert [ text "stack" <+> text "#" <> text (show n) <+> text "size" <+> text (show $ length s) <> text ":" <+> ppStack (take stackPPLimit s) | (n, s) <- zip [1..] stacks ]

ppStackDefInfo :: StackDefInfo -> Doc
ppStackDefInfo s = text "stack" <+> text "size" <+> text (show $ length s) <> text ":" <+> ppStack (take stackPPLimit s)

ppStack :: StackDefInfo -> Doc
ppStack s = vert [ commasep [ text (show n) | n <- IntSet.elems e ] | e <- s ] $+$ text "..."
}


--
-- Semantics of nodes
--

{
nodeSem :: Word32 -> Int -> (StackDefInfo -> StackDefInfo) -> NodeFunIn TAbstractStack -> NodeFunOut TAbstractStack
nodeSem method label f (NodeFunIn inps mbCurrent mbPrev sh) = NodeFunOut (Just (outStack, n)) mbOutStack sh where
  mbOutStack = case mbPrev of                                  -- check if the output changed
    Just prevStack | prevStack == outStack -> Nothing          -- output has not changed
                   | n > iterLimit         -> Nothing          -- iteration limit reached
    _                                      -> Just outStack    -- output changed (into outStack)

  outStack = f inpStack       -- apply the stack transformation

  inpStack = case inps of
    []    -> []
    [inp] -> inp
    _     -> foldl1 joinStackDefs inps

  n = case mbCurrent of
        Just (_, m) -> ( if m == iterWarning
                         then trace ("param analysis at method " ++ show method ++ " and instruction " ++ show label ++ ": warning: more than " ++ show iterWarning ++ " iterations.") id
                         else id
                       ) (m+1)
        Nothing     -> 1

iterWarning :: Int
iterWarning = 80

iterLimit   :: Int
iterLimit   = 100

checkSem :: Int -> Word32 -> Int -> NodeFunIn TAbstractStack -> NodeFunOut TAbstractStack
checkSem tagNr method label (NodeFunIn inps _ _ sh) = seq check NodeFunOut Nothing Nothing sh where
  check | all (\x -> length x == l) inps = ()
        | otherwise                      = trace ("Warning (tag " ++ show tagNr ++ " mthd " ++ show method ++ " instr " ++ show label ++ "): different stack usage on incoming paths at tag: " ++ showInps inps) ()
        where l | null inps = 0
                | otherwise = length (head inps)

showInps :: [StackDefInfo] -> String
showInps []     = "no incoming CFG paths"
showInps [s]    = showStack s
showInps (s:ss) = showStack s ++ "  and  " ++ showInps ss

showStack :: StackDefInfo -> String
showStack s = "stack[" ++ show (length s) ++ "] " ++ showStack' s

showStack' :: StackDefInfo -> String
showStack' []     = "..."
showStack' (s:ss) = "{ lbls: " ++ showLabels (IntSet.elems s) ++ "} : " ++ showStack' ss

showLabels :: [Int] -> String
showLabels []  = "no known lbls"
showLabels [l] = show l
showLabels (l:ll) = show l ++ "," ++ showLabels ll
}

ATTR InstructionsLike LabInstruction [ methodId : Word32 | | ]
SEM BodyInfo | Info  instructions.methodId = @method

SEM LabInstruction | Instr
  lhs.gathNodes = node @label $ nodeSem @lhs.methodId @label @instruction.afterEffect
  lhs.gathCheck = node @label $ checkSem @lhs.tagNr @lhs.methodId @label


--
-- Connecting it together
--

-- Collect edges
ATTR InstructionsLike LabInstruction
  [ | | gathEdges USE {`mappend`} {mempty} : StackGraph ]

SEM LabInstruction | Instr
  lhs.gathEdges = mconcat [ edge @label t | t <- @loc.targets ]

-- Collect semantics for nodes
ATTR InstructionsLike LabInstruction
  [ | | gathNodes, gathCheck USE {`mappend`} {mempty} : StackSem ]

SEM BodyInfo | Info
  loc.rootEdges      = mconcat (edge methodStart @loc.methodRoot : [ edge excptStart r | r <- @exceptions.roots ])
  loc.allEdges       = @loc.rootEdges `mappend` @instructions.gathEdges
  loc.methodRoot     = maybe 0 id @instructions.followup
  loc.stacksInit     = Map.fromList [(methodStart, []),(excptStart, [IntSet.empty])]
  loc.nodeResults1   = solve' @loc.allEdges @instructions.gathNodes @loc.stacksInit Map.empty
  loc.stacks1        = stacksFromNodes @loc.nodeResults1
  loc.nodeResults2   = solve' @loc.allEdges @instructions.gathCheck @loc.stacks1 @loc.nodeResults1
  loc.stacks2        = stacksFromNodes @loc.nodeResults2
  loc.stacksRes      = IntMap.fromAscList $ Map.assocs @loc.stacks2

{
stacksFromNodes :: Map Int (NodeVal TAbstractStack) -> Map Int StackDefInfo
stacksFromNodes = Map.map fst
}

ATTR Exceptions Exception [ | | roots USE {++} {[]} : {[Int]} ]
SEM Exception | Info  lhs.roots = [fromIntegral @target]

{
methodStart :: Int
methodStart = -1

excptStart :: Int
excptStart  = -2
}


--
-- Abstract interpretation of each instruction
--

ATTR Instruction [ label : Int | | afterEffect : {StackDefInfo -> StackDefInfo} ]
SEM LabInstruction | Instr
  instruction.label = @label


SEM Instruction | * - Nop  loc.mutfun = mut
SEM Instruction | Nop      loc.mutfun = if optVerbose @lhs.opts
                                        then mutTrace
                                        else mut

SEM Instruction | *
  lhs.afterEffect = @loc.mutfun @lhs.label @loc.inputs @loc.outputs

{
mut :: (Integral a, Integral b) => Int -> a -> b -> StackDefInfo -> StackDefInfo
mut label inputs outputs
  = (replicate (fromIntegral outputs) (IntSet.singleton label) ++)
  . drop (fromIntegral inputs)

mutTrace :: (Integral a, Integral b) => Int -> a -> b -> StackDefInfo -> StackDefInfo
mutTrace label inputs outputs stIn
  | inputs == 0 && outputs == 0 =
      trace ("param analysis: stack at " ++ show label ++ ": " ++ show stIn) stIn
}
