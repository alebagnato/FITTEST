/*****************************************************************************************************************************************************************************************************************/
Copyright (c) 2010-2050, UCL. All rights reserved. This program and the accompanying materials are made available under the terms of the 3-Clause BSD License which accompanies this distribution, and is available at http://www.opensource.org/licenses/BSD-3-Clause. The research leading to these results has received funding from the European Community`s Seventh Framework Programme (FP7/2007-2013) under the grant agreement  FP7-257574 FITTEST.
/*****************************************************************************************************************************************************************************************************************/

package eu.fittest.ucl.watt.api;

import java.io.File;
import java.util.ArrayList;
import java.util.Hashtable;
import java.util.List;

import eu.fittest.ucl.watt.Database;
import eu.fittest.ucl.watt.WattRunner;

public class Watt {
	
	private ArrayList<WattListener> listeners;
	private WattRunner runner;
	private Database db;
		
	public Watt() {
		this.listeners = new ArrayList<WattListener>();
	}
	
	private void stop() {
		for(WattListener listener : this.listeners)
			listener.onStop();
	}
	
	//**** API **/
	/**
	 * Entry point to start running watt
	 * @param wattDir The path directory where all the watt perl (and .sql) files reside 
	 * @param url The URL of the website to test with watt
	 * @param appLogin A username if the application requires a login (use "" in case no login is required)
	 * @param appPassword A password if the application requires a password (use "" in case no password is required)
	 */
	public void start(File wattDir, String url, String appLogin, String appPassword) {
		this.start(wattDir, url, appLogin, appPassword, "", "");
	}
	/**
	 * Entry point to start running watt
	 * @param wattDir The path directory where all the watt perl (and .sql) files reside 
	 * @param url The URL of the website to test with watt
	 * @param appLogin A username if the application requires a login (use "" in case no login is required)
	 * @param appPassword A password if the application requires a password (use "" in case no password is required)
	 * @param dbUser The username to connect to mysql (e.g. "root")
	 * @param dbPassword The password to connect to mysql
	 */
	public void start(File wattDir, String url, String appLogin, String appPassword, String dbUser, String dbPassword) {
		for(WattListener listener : this.listeners)
			listener.onStart();
		this.db = new Database(dbUser, dbPassword);
		this.runner = new WattRunner(this.db, wattDir);
		
		if(this.db.runSQLSetupScript()) {
			this.runner.runWatt(url, appLogin, appPassword);
		}
		this.stop();
	}
	/**
	 * Attach a listener that gets notified when watt starts and stops
	 * @param listener
	 */
	public void registerListener(WattListener listener) {
		this.listeners.add(listener);
	}
	/**
	 * 
	 * @return Return a list of URLs (as strings) that have been crawled by watt and whose HTTP STATUS code was 200 (OK) during crawling
	 * (i.e. watt could successfully load the page)
	 */
	public List<String> getSuccessfulRequestURL() {
		if(this.db != null)
			return this.db.getSuccessfulRequestURL();
		return null;
	}
	/**
	 * 
	 * @return Return a list of URLs (as strings) that could not be crawled by watt and whose HTTP STATUS code was not 200 (OK)
	 */
	public List<String> getUnsuccessfulRequestURL() {
		if(this.db != null)
			return this.db.getUnsuccessfulRequestURL();
		return null;
	}
	/**
	 * 
	 * @return Return a list of URLs crawled alongside the HTTP STATUS code for that URL. Only distinct URLs are returned (i.e.
	 * in case a URL was requested multiple times, only one instance is listed)
	 */
	public List<Hashtable<String, String>> getDistinctCrawledURLs() {
		if(this.db != null)
			return this.db.getDistinctCrawledURLs();
		return null;
	}
	/**
	 * 
	 * @return Return a list of all the form data generated by watt during testing. The form data can be regarded as test inputs and
	 * it is up to the tester to decide if some test inputs are valid or invalid and if invalid form data resulted in appropriate errors.
	 */
	public List<WattFormData> getAllSubmittedFormData() {
		if(this.db != null)
			return this.db.getAllSubmittedFormData();
		return null;
	}
}
