/**
 */
package eu.fittest.test.project.provider;

import eu.fittest.test.project.util.ProjectAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class ProjectItemProviderAdapterFactory extends ProjectAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ProjectItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link eu.fittest.test.project.GAParameterType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GAParameterTypeItemProvider gaParameterTypeItemProvider;

	/**
	 * This creates an adapter for a {@link eu.fittest.test.project.GAParameterType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGAParameterTypeAdapter() {
		if (gaParameterTypeItemProvider == null) {
			gaParameterTypeItemProvider = new GAParameterTypeItemProvider(this);
		}

		return gaParameterTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link eu.fittest.test.project.GeneralType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GeneralTypeItemProvider generalTypeItemProvider;

	/**
	 * This creates an adapter for a {@link eu.fittest.test.project.GeneralType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGeneralTypeAdapter() {
		if (generalTypeItemProvider == null) {
			generalTypeItemProvider = new GeneralTypeItemProvider(this);
		}

		return generalTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link eu.fittest.test.project.InstrumentationType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InstrumentationTypeItemProvider instrumentationTypeItemProvider;

	/**
	 * This creates an adapter for a {@link eu.fittest.test.project.InstrumentationType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInstrumentationTypeAdapter() {
		if (instrumentationTypeItemProvider == null) {
			instrumentationTypeItemProvider = new InstrumentationTypeItemProvider(this);
		}

		return instrumentationTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link eu.fittest.test.project.LoggingType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LoggingTypeItemProvider loggingTypeItemProvider;

	/**
	 * This creates an adapter for a {@link eu.fittest.test.project.LoggingType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLoggingTypeAdapter() {
		if (loggingTypeItemProvider == null) {
			loggingTypeItemProvider = new LoggingTypeItemProvider(this);
		}

		return loggingTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link eu.fittest.test.project.LogTargetType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LogTargetTypeItemProvider logTargetTypeItemProvider;

	/**
	 * This creates an adapter for a {@link eu.fittest.test.project.LogTargetType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLogTargetTypeAdapter() {
		if (logTargetTypeItemProvider == null) {
			logTargetTypeItemProvider = new LogTargetTypeItemProvider(this);
		}

		return logTargetTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link eu.fittest.test.project.ModelInferenceType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ModelInferenceTypeItemProvider modelInferenceTypeItemProvider;

	/**
	 * This creates an adapter for a {@link eu.fittest.test.project.ModelInferenceType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createModelInferenceTypeAdapter() {
		if (modelInferenceTypeItemProvider == null) {
			modelInferenceTypeItemProvider = new ModelInferenceTypeItemProvider(this);
		}

		return modelInferenceTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link eu.fittest.test.project.OracleType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OracleTypeItemProvider oracleTypeItemProvider;

	/**
	 * This creates an adapter for a {@link eu.fittest.test.project.OracleType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOracleTypeAdapter() {
		if (oracleTypeItemProvider == null) {
			oracleTypeItemProvider = new OracleTypeItemProvider(this);
		}

		return oracleTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link eu.fittest.test.project.TestGenerationType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TestGenerationTypeItemProvider testGenerationTypeItemProvider;

	/**
	 * This creates an adapter for a {@link eu.fittest.test.project.TestGenerationType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTestGenerationTypeAdapter() {
		if (testGenerationTypeItemProvider == null) {
			testGenerationTypeItemProvider = new TestGenerationTypeItemProvider(this);
		}

		return testGenerationTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link eu.fittest.test.project.TestProject} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TestProjectItemProvider testProjectItemProvider;

	/**
	 * This creates an adapter for a {@link eu.fittest.test.project.TestProject}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTestProjectAdapter() {
		if (testProjectItemProvider == null) {
			testProjectItemProvider = new TestProjectItemProvider(this);
		}

		return testProjectItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (gaParameterTypeItemProvider != null) gaParameterTypeItemProvider.dispose();
		if (generalTypeItemProvider != null) generalTypeItemProvider.dispose();
		if (instrumentationTypeItemProvider != null) instrumentationTypeItemProvider.dispose();
		if (loggingTypeItemProvider != null) loggingTypeItemProvider.dispose();
		if (logTargetTypeItemProvider != null) logTargetTypeItemProvider.dispose();
		if (modelInferenceTypeItemProvider != null) modelInferenceTypeItemProvider.dispose();
		if (oracleTypeItemProvider != null) oracleTypeItemProvider.dispose();
		if (testGenerationTypeItemProvider != null) testGenerationTypeItemProvider.dispose();
		if (testProjectItemProvider != null) testProjectItemProvider.dispose();
	}

}
