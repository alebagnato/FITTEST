MODULE {Info.Stats} {stats,Stats(..)} {}

INCLUDE "ByteCode/Ast.ag"

imports
{
import Data.ByteString.Lazy(ByteString)
import ByteCode.ByteCode
import Data.Word
}


WRAPPER SwfFile

{
stats :: SwfFile -> Statss
stats m = out where
  inh = Inh_SwfFile {}
  sem = sem_SwfFile m
  syn = wrap_SwfFile sem inh
  out = (output_Syn_SwfFile syn) : (outputs_Syn_SwfFile syn)

type Statss = [Stats]

data Stats = Stats
  { numTags    :: Int
  , tagNr      :: Int
  , numInstrs  :: Int
  , numClasses :: Int
  , numProps   :: Int
  , numMethods :: Int
  , numNames   :: Int
  } deriving (Show)
}

ATTR SwfTags      [ | | output : Stats ]
ATTR SwfFile Tags [ | | outputs USE {++} {[]} : Statss ]

SEM SwfFile | File
  lhs.output = Stats { numTags    = @tags.tagCount - 1 -- Delete the Nil case
                     , tagNr      = 0
                     , numInstrs  = @tags.instrsCount
                     , numClasses = @tags.classCount
                     , numProps   = @tags.propsCount
                     , numMethods = @tags.methodsCount
                     , numNames   = @tags.namesCount
                     }

ATTR Tags Tag [ | | tagCount USE {+} {1} : Int ]

ATTR AllSwf [ | | instrsCount, classCount, propsCount, methodsCount, namesCount USE {+} {0} : Int ]

ATTR Tags [ | tagNr : Int | ]
ATTR Tag AbcFile BodyInfos BodyInfo InstructionsLike InstructionLike LabInstruction [ tagNr : Int | |] 

SEM SwfFile | File
  tags.tagNr   = 1

SEM Tags | Cons
  hd.tagNr  = @lhs.tagNr
  tl.tagNr  = 1 + @lhs.tagNr

 
SEM Instruction | *
  +instrsCount = (+1)

SEM MultinameInfo | *
  +namesCount = (+1)

SEM MethodInfo | Info
  +methodsCount = (+1)

SEM ClassInfo | Info
  +classCount = (+1)

SEM Trait | Trait
  +propsCount = (+1)

SEM Tags | Nil 
  lhs.outputs = []
  lhs.output  = Stats { }
  
SEM Tags | Cons
  lhs.outputs = @loc.output : @tl.outputs
  loc.output  = Stats { numTags    = @hd.tagCount
                      , tagNr      = @lhs.tagNr  
                      , numInstrs  = @hd.instrsCount
                      , numClasses = @hd.classCount
                      , numProps   = @hd.propsCount
                      , numMethods = @hd.methodsCount
                      , numNames   = @hd.namesCount
                      }

                  
