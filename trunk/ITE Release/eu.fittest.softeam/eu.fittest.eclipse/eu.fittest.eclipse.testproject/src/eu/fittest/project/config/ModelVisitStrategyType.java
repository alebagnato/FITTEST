//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, vhudson-jaxb-ri-2.1-833 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2014.01.29 at 02:10:55 PM CET 
//


package eu.fittest.project.config;

import javax.xml.bind.annotation.XmlEnum;
import javax.xml.bind.annotation.XmlEnumValue;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for ModelVisitStrategyType.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <p>
 * <pre>
 * &lt;simpleType name="ModelVisitStrategyType">
 *   &lt;restriction base="{http://www.w3.org/2001/XMLSchema}string">
 *     &lt;enumeration value="VISITOR_BREADTHFIRST"/>
 *     &lt;enumeration value="VISITOR_BREADTHFIRST_WITH_GLOBAL_LOOPS"/>
 *     &lt;enumeration value="VISITOR_BREADTHFIRST_WITH_LOCAL_LOOPS"/>
 *     &lt;enumeration value="VISITOR_COVERAGE_UNIFORM"/>
 *     &lt;enumeration value="VISITOR_SEQ_MAXK"/>
 *     &lt;enumeration value="VISITOR_SEQK"/>
 *     &lt;enumeration value="VISITOR_SEMK"/>
 *     &lt;enumeration value="VISITOR_SEM_MAXK"/>
 *     &lt;enumeration value="VISITOR_SEMsextractor_onlyLastEvent_maxK"/>
 *     &lt;enumeration value="VISITOR_SEMsextractor_onlyLastEvent_K"/>
 *     &lt;enumeration value="VISITOR_ALT_MAXK"/>
 *     &lt;enumeration value="VISITOR_DIVERSITY"/>
 *     &lt;enumeration value="VISITOR_DIVERSITY_TC"/>
 *     &lt;enumeration value="VISITOR_DIVERSITY_TL"/>
 *     &lt;enumeration value="VISITOR_DIVERSITY_EDM"/>
 *     &lt;enumeration value="VISITOR_DIVERSITY_EDA"/>
 *     &lt;enumeration value="VISITOR_DIVERSITY_onlyLastEvent_TC"/>
 *     &lt;enumeration value="VISITOR_DIVERSITY_onlyLastEvent_TL"/>
 *     &lt;enumeration value="VISITOR_DIVERSITY_onlyLastEvent_EDA"/>
 *     &lt;enumeration value="VISITOR_DIVERSITY_onlyLastEvent_EDM"/>
 *   &lt;/restriction>
 * &lt;/simpleType>
 * </pre>
 * 
 */
@XmlType(name = "ModelVisitStrategyType")
@XmlEnum
public enum ModelVisitStrategyType {

    VISITOR_BREADTHFIRST("VISITOR_BREADTHFIRST"),
    VISITOR_BREADTHFIRST_WITH_GLOBAL_LOOPS("VISITOR_BREADTHFIRST_WITH_GLOBAL_LOOPS"),
    VISITOR_BREADTHFIRST_WITH_LOCAL_LOOPS("VISITOR_BREADTHFIRST_WITH_LOCAL_LOOPS"),
    VISITOR_COVERAGE_UNIFORM("VISITOR_COVERAGE_UNIFORM"),
    VISITOR_SEQ_MAXK("VISITOR_SEQ_MAXK"),
    VISITOR_SEQK("VISITOR_SEQK"),
    VISITOR_SEMK("VISITOR_SEMK"),
    VISITOR_SEM_MAXK("VISITOR_SEM_MAXK"),
    @XmlEnumValue("VISITOR_SEMsextractor_onlyLastEvent_maxK")
    VISITOR_SE_MSEXTRACTOR_ONLY_LAST_EVENT_MAX_K("VISITOR_SEMsextractor_onlyLastEvent_maxK"),
    @XmlEnumValue("VISITOR_SEMsextractor_onlyLastEvent_K")
    VISITOR_SE_MSEXTRACTOR_ONLY_LAST_EVENT_K("VISITOR_SEMsextractor_onlyLastEvent_K"),
    VISITOR_ALT_MAXK("VISITOR_ALT_MAXK"),
    VISITOR_DIVERSITY("VISITOR_DIVERSITY"),
    VISITOR_DIVERSITY_TC("VISITOR_DIVERSITY_TC"),
    VISITOR_DIVERSITY_TL("VISITOR_DIVERSITY_TL"),
    VISITOR_DIVERSITY_EDM("VISITOR_DIVERSITY_EDM"),
    VISITOR_DIVERSITY_EDA("VISITOR_DIVERSITY_EDA"),
    @XmlEnumValue("VISITOR_DIVERSITY_onlyLastEvent_TC")
    VISITOR_DIVERSITY_ONLY_LAST_EVENT_TC("VISITOR_DIVERSITY_onlyLastEvent_TC"),
    @XmlEnumValue("VISITOR_DIVERSITY_onlyLastEvent_TL")
    VISITOR_DIVERSITY_ONLY_LAST_EVENT_TL("VISITOR_DIVERSITY_onlyLastEvent_TL"),
    @XmlEnumValue("VISITOR_DIVERSITY_onlyLastEvent_EDA")
    VISITOR_DIVERSITY_ONLY_LAST_EVENT_EDA("VISITOR_DIVERSITY_onlyLastEvent_EDA"),
    @XmlEnumValue("VISITOR_DIVERSITY_onlyLastEvent_EDM")
    VISITOR_DIVERSITY_ONLY_LAST_EVENT_EDM("VISITOR_DIVERSITY_onlyLastEvent_EDM");
    private final String value;

    ModelVisitStrategyType(String v) {
        value = v;
    }

    public String value() {
        return value;
    }

    public static ModelVisitStrategyType fromValue(String v) {
        for (ModelVisitStrategyType c: ModelVisitStrategyType.values()) {
            if (c.value.equals(v)) {
                return c;
            }
        }
        throw new IllegalArgumentException(v);
    }

}
