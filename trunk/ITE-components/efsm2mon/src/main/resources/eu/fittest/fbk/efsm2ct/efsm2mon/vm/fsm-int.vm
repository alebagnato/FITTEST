/**
 * Automatically generated by $tool.name $tool.version
 * template engine: velocity
 * template file: fsm-int.vm
 */
package ${packageName};

import ${model.sutPackage}.${model.sutName};

import fsmtester.runtime.FsmtesterException;
import fsmtester.runtime.UnderSpecifiedException;
import fsmtester.runtime.InternalInconsistencyException;
import fsmtester.runtime.NotApplicableException;


public class Test${model.sutName}  {

    private int s_state = ${model.initialState.id};
    private ${model.sutName} sut = new ${model.sutName}();

    
#foreach($m in $model.mutators)
    public void ${m.name}(${m.formalArgs}) throws FsmtesterException {

        boolean applies =

        #foreach($s in ${m.sources})
            s_state == ${s.id} ||
        #end false;

        if (!applies) {
	
            throw new NotApplicableException("${m.name} doesn't apply to current state:"+s_state);
        }

        sut.${m.name}(${m.actualArgs});

        #foreach($ins in $model.inspectors)
        ${ins.type} ${ins.name} = sut.${ins.name}();
        #end

        String targetStateStr = "sut.state("
        #foreach($ins in $model.inspectors)
            + ("${ins.name}=" + ${ins.name}+" ")
        #end
        +")";


        switch (s_state) {
                #foreach($src in ${m.sources})
                case ${src.id}:
                    #foreach($t in ${src.outgoing})
                    
                    #if(${t.mutator} == $m)
                    if ( ${t.target.predicate} ) { 
                        System.out.println(s_state+" -> "+${t.target.id});
                        s_state = ${t.target.id};
                    } else
                    #end
                    #end {
			   
                        throw new UnderSpecifiedException("in state "+s_state+", unexpected target state for mutator: ${m.name} "+targetStateStr);
                    }
                    break;
                #end
                default:
			throw new InternalInconsistencyException("fsmtester internal inconsistency error, state:"+s_state);
        }
    }
    #end


}