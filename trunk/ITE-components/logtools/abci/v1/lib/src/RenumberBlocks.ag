-- Gives each block a globally unique id
MODULE {RenumberBlocks} {renumberBlocks} {}

INCLUDE "ByteCodeAst.ag"

imports
{
import Data.ByteString.Lazy(ByteString,pack)
import ByteCode
import Data.Word
}


WRAPPER SwfFile

{
renumberBlocks :: SwfFile -> SwfFile
renumberBlocks m = out where
  inh = Inh_SwfFile {}
  sem = sem_SwfFile m
  syn = wrap_SwfFile sem inh
  out = output_Syn_SwfFile syn
}


--
-- Give each virtual instruction a unique id (globally)
--

ATTR AllSwf [ | | output : SELF ]
ATTR Tags Tag AbcFile BodyInfos BodyInfo InstructionsLike InstructionLike VirtKind [ | counter : Int | ]
ATTR InstructionsLike InstructionLike VirtKind [ | local, body : Int | ]
ATTR VirtKind [ | | vid : Int ]

SEM SwfFile | File
  tags.counter = 1

SEM BodyInfo | Info
  instructions.local = 0
  instructions.body  = 0

SEM Instruction | Virtual
  lhs.output  = Instruction_Virtual @kind.vid @kind.output

SEM VirtKind
  | BeginBlock BeginBody Label Terminator
    Dependency SetLocal GetLocal
      loc.vid     = @lhs.counter
      lhs.counter = @lhs.counter + 1
      lhs.vid     = @loc.vid
      lhs.local   = @loc.vid
  | EndBlock
      lhs.vid     = @lhs.local
  | EndBody
      lhs.vid     = @lhs.body
